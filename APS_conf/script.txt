Our project used the Immersed Boundary Method to simulate moving droplets on a wall. The wall is a vertical solid surface, here modeled as a no-flux boundary, represented by the black markers. The interface between liquid and gas is represented by the blue markers. The green markers on the inside of the droplet are variable density markers, giving the liquid extra mass. 

We propose and test three techniques on top of the penalty immersed boundary method: dynamic slipping, interface resampling, and interface splicing. 

Let's dive in. 
Each interface marker is pulled by its two neighbors at constant magnitude. 
This simulates the surface tension force. Here is a brief explanation why. Force is the gradient of energy. The 2D tension energy is proportional to the interface length. View that as the sum of all line segments connecting neighboring markers. An attractive force with constant magnitude is precisely the gradient of the length of one line segment. Apply that to all line segments and this is what we get. 
Note that the total force on one marker is always normal to the interface. 

The same logic also simulates the unbalanced Young’s force at a contact point. 
At the wall, there is one interface marker that only has one neighbor. The total force on this marker becomes tangent to the interface. 
However, the horizontal component of this force is balanced by the no-flux force provided by the wall. 
Its vertical component turns out to equal the Young’s force. 

Notice that the sum of the tension force on all markers is exactly the sum of Young’s force on the two markers, just inverted in direction. 
this way, We can view tension force and Young’s force as a pair of action-reaction forces. 

At the contact point, 
Young’s force is tangent to the wall. 
The tension force is normal to the interface. 

Young’s force has unit 𝑁, and is focused on one point. 
Tension force has unit 𝑁/𝑐𝑚, and is spread across the interface. 
Therefore, at the exact contact point, tension force is negligible compared to Young’s force. 

Now, view the no-slip boundary condition as a friction force, provided by the wall, exerted onto the fluid. 
No-slip simply means that this friction force is a reactive force, always balancing the sum of active forces at this location in the vertical direction. 
The only active force at the wall is Young’s force. Therefore, the wall friction, if no-slip, equals the Young’s force, just inverted in direction. 

Interested viewers may pause here and take a look at this slide, but the video will now move on...

to dynamic slipping. Contrary to the no-slip condition, we change how the friction reacts to movement intentions. 

[pause]

In real life, we observe that small droplets stay on the wall as if the wall was no-slip, while bigger droplets roll down the wall. 
This phenomenon is the well-known contact line paradox. Why is the wall sometimes no-slip and other times not? 
A 2018 molecular simulation study has partially revealed the microscopic model for water-hydrophilic surface interaction. 

The dynamic slipping scheme basically explains how we simulate a slip-with-friction wall. 
The friction responds to movement velocity and contact angle. The method requires a function, mu of theta, 

that computes the friction coefficient given the contact angle. 
Our implementation of this function is based on a regression of measured results yielded from the 2018 molecular simulation study. 

The resulting macroscopic behaviors are largely analogous to static friction and sliding friction. 

How do we implement this in the simulation?
It is well known that a no-slip wall can be simulated as an array of markers using the penalty method. 
To simulate a dynamic slipping wall, we use what we call the incur-redeem-dismiss penalty method. In this view, the baseline penalty method would be an incur-redeem penalty method. 

Let's first look at the baseline penalty method for no-slip. 
Represent the wall with an array of markers. The markers follow the fluid flow. 
As a marker moves away from its initial location, penalty is incurred. 
Apply a penalty force to bring it back. 
The penalty will never be fully redeemed until the marker returns to its correct location. 
This guarantees no-flux and no-slip.

Now we introduce another way penalty can decrease: dismissal. No fluid flow is involved. Penalty is instantly decreased within a timestep by “teleporting” the marker. 
The amount of penalty dismissed, multiplied by friction force, gives the work done, in other words, heat dissipation. 

𝐾_𝑤𝑎𝑙𝑙 is the stiffness of the wall markers. 𝑓_𝑙𝑖𝑚𝑖𝑡/𝐾_𝑤𝑎𝑙𝑙  is thus the maximum penalty that static friction can hold. 
Whenever the vertical penalty exceeds the limit, dismiss an amount of penalty to bring it back to the limit.
The horizontal penalty is never dismissed, so no-flux is preserved. 

Let's look at some demos. 

Here, from left to right, spatial resolution is progressively refined. from top to bottom, timestep is progressively refined. 

This is the final droplet shape. 

This new method solves the contact line paradox but introduces some volume errors. Whenever penalty is dismissed, we do it on the vertical component of the discrete representation of the wall. When the horizontal tension is not vertically uniform, the teleportation will not be parallel to the wall, creating volume errors. 

Next, let's look at the second technique - Step-wise Interface Resampling.

The problem with Surface tension is that it's always normal to the interface.
No tangential component means that fluid flow can disrupt the distribution of interface markers. 

Therefore, every timestep we check for distribution anomolies, adding markers to wide gaps and removing markers from tight spaces. 

On the left is what happens if we do not resample the interface. On the right, we use blue circles to visualize addition, and red circles to visualize removal, of interface markers. 

This resampling technique, however, is very difficult to implement in 3D, where the point array becomes a surface mesh. 
We also encounter area conservation problems. 

Here the droplet gradually shrinks even when nothing is happening. 

Fortunately, refining spatial resolution significantly curbs this error. 

Next, let's talk about the third technique - Interface Splicing. 

There are six conceivable scenarios where the interface needs to be spliced. Two droplets merging, one droplet splitting into two, droplet attaching onto the wall, detaching from the wall, droplet splitting at the wall, and droplets merging at the wall. 

Here there are three pairs of reversed processes. 

And three pairs of scenarios whose implementations are exactly the same. They are locally indistinguishable, since we don't care about liquid and gas switching sides. 

Let's see some demos. Again, from left to right we have the spatial resolution progressively refined. 

How did we implement this? We store the interface markers in circular double linked lists. The linking direction preserves the polarity information: if you follow the links in the positive direction, the liquid will always be on your right. 
When the distance between two interfaces is smaller than a threshold and the two interfaces are approaching, splice them. 
The following couple of timesteps become a no-splice window. This rule makes splicing events more atomic, so that we don't have multiple splicing events competing to accomplish the same macroscopic effect. 
Computation-wise, a naive algorithm would check every pair of markers at every timestep. This is O(N^2). We check every pair of markers only once in a while and mark anything close together as suspects. At each timestep we only check the suspect markers. 

Here we show the droplet area against time. The merging event happens around t=0.025

Here is the same plot but for the six dropelts run. Refining spatial resolution can somehow mitigate the energy error from resampling. 

Next we test our overall method against a benchmark where an air bubble rises up in a column of water. 

Here is the center of mass and circularity index against time. The black smooth curve shows our results that already converge with regard to timestep and spatial resolution. The inaccuracy is still significant. This is potentially because our method does not support variable viscousity. 

This is the terminal droplet shape, compared against the benchmark. 

In conclusion, we propose three techniques as extensions to the Immersed Boundary Method: dynamic slipping, frame-wise interface resampling, and interface splicing. The most note-worthy limitations include the lack of variable viscousity, the lack of adaptive mesh refinement, Questionable volume conservation, and Density markers becoming progressively less uniform as time goes by. 
